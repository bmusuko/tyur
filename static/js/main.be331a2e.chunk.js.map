{"version":3,"sources":["Result.js","App.js","serviceWorker.js","index.js"],"names":["Result","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","page","prevPage","availNext","query","inherits","createClass","key","value","nextProps","setState","token","console","log","prevProps","_this2","s","i","length","isNumber","axios","get","concat","headers","Auth-Token","then","res","payload","react_default","a","createElement","map","nim","name","nim_tpb","nim_jur","prodi","React","Component","login","qs","stringify","username","password","Content-Type","localStorage","getItem","response","code","post","setItem","App","handleUserInput","e","target","status","bind","assertThisInitialized","type","onChange","placeholder","Result_Result","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be331a2e.chunk.js","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\n\nfunction isNumber(s){\n\tfor (let i = 0; i < s.length; i++) {\n    \tif(s[i] >= \"0\" && s[i] <=\"9\"){\n\n    \t} else{\n    \t\treturn false;\n    \t}\n\t}\n\treturn true;\n}\n\n\nexport class Result extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {data : [],page: 0,prevPage : 0,availNext: true,query: \"\"}\n\t}\n\n\n\tcomponentWillReceiveProps(nextProps){\n\t\tthis.setState({token : nextProps.token});\n\t\tthis.setState({query : nextProps.query});\n\t\tthis.setState({page: 0});\n\t\tthis.setState({prevPage : 0});\n\t\tconsole.log(\"marimas\");\n\t}\n\n\tcomponentDidUpdate(prevProps){\n\t\tif(prevProps.query !== this.state.query){\n\t\t\tif(isNumber(this.state.query)){\n\t\t\t\taxios.get(`https://api.stya.net/nim/byid?query=${this.state.query}&page=${this.state.page}`,\n\t\t\t\t{ headers: { \"Auth-Token\": this.props.token} })\n\t\t    \t.then(res => this.setState({data : res.data.payload}));\n\t\t    } else {\n\t\t    \taxios.get(`https://api.stya.net/nim/byname?name=${this.state.query}&page=${this.state.page}`,\n\t\t\t\t{ headers: { \"Auth-Token\": this.props.token}})\n\t\t    \t.then(res => this.setState({data : res.data.payload}));\n\t\t    }\n\t\t} \n\t\tconsole.log(\"lolo\");\n\t}\n\n\trender(){\n\t\tif(this.state.data){\n\t\t\treturn (\n\t\t\t<div>\n\t\t\t<table>\n\t        <thead>\n\t          <th>nama</th>\n\t          <th>nim tpb</th>\n\t          <th>nim jurusan</th>\n\t          <th>prodi</th>\n\t          </thead>\n\t        <tbody>      \n\t          { this.state.data.map(nim =><tr> <td>{nim.name}</td>\n\t                                      <td>{nim.nim_tpb}</td>\n\t                                      <td>{nim.nim_jur}</td>\n\t                                      <td>{nim.prodi}</td></tr>\n\t          )}\n\t        </tbody>\n\t    </table>\n\t    \n\t\t\t</div>\n\t\t\t)\n\t\t} else{\n\t\t\treturn(\n\t\t\t\t<h2>Please Refresh</h2>)\n\t\t}\n\t}\n\t\n}","import React from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport {Result} from \"./Result\";\nimport qs from 'qs';\n\n\nconst login = qs.stringify({\n      username: 'bmusuko',\n      password: 'gorengtoba12'\n});\n\nconst headers = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\n\nif(localStorage.getItem('token')){\n  axios.get(`https://api.stya.net/nim/byid?query=1`,{ headers: { \"Auth-Token\": localStorage.getItem(\"token\")} }) // dummy untuk cek token masih valid\n  .then(function(response){ \n    if(response.data.code !== 2){\n      axios.post(\"https://api.stya.net/nim/login\",login,headers) \n      .then(res =>  (localStorage.setItem('token',res.data.token)))\n    }\n  })\n} else{\n  axios.post(\"https://api.stya.net/nim/login\",login,headers) \n      .then(res =>  (localStorage.setItem('token',res.data.token)));\n\n}\n\n\n\nexport class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = { \n      query : \"\",\n      status: \"\",\n      token : localStorage.getItem(\"token\")}\n\n    this.handleUserInput = this.handleUserInput.bind(this);\n  }\n\n  handleUserInput = (e) =>{\n    this.setState({query: e.target.value})\n  }\n\n  render(){\n    return(\n      <div>\n      <input type=\"text\" onChange={this.handleUserInput} placeholder=\"Search\"/>\n      <h1>{}</h1>\n      <br />\n      <br />\n      <Result query ={this.state.query} token = {localStorage.getItem(\"token\")} /> \n      </div>  )}\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}